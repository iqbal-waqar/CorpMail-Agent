from typing import List, Dict, Any
from datetime import datetime
from ..schemas.email import RecentEmail, EmailSendRequest, EmailSendResult
from ..services.graph import EmailAgentGraph
from ..services.sendgrid import EmailService

class EmailInteractor:
    def __init__(self):
        self.agent_graph = EmailAgentGraph()
        self.email_service = EmailService()
        self.recent_emails = []  
        
    async def process_chat_message(self, message: str, employee_emails: List[str] = None) -> Dict[str, Any]:
        try:
            if employee_emails is None:
                employee_emails = []
            
            message_lower = message.lower()
            
            needs_sending = any(phrase in message_lower for phrase in ["send email", "send it", "send the email"])
            
            if needs_sending and not employee_emails:
                return {
                    "success": False,
                    "response": "❌ No email addresses available! Please add Gmail accounts or other email addresses in the sidebar first to send emails.",
                    "email_draft": "",
                    "pending_send": False
                }
            
            agent_result = await self.agent_graph.process_message(message, employee_emails)
            
            response = agent_result.get("response", "I'm here to help you with email communications!")
            email_draft = agent_result.get("email_draft", "")
            send_result = agent_result.get("send_result")
            pending_email = agent_result.get("pending_email", {})
            
            if send_result:
                if send_result.get("success"):
                    recipient_info = self._get_recipient_info(employee_emails)
                    response = f"✅ **Email Sent Successfully by AI Agent!**\n\n📧 **Subject:** {pending_email.get('subject', 'Email')}\n📬 **Recipients:** {send_result['sent_count']} out of {send_result['total_count']} recipients\n📋 **Breakdown:** {', '.join(recipient_info)}\n\n🎉 Your email has been delivered to all recipients!"
                    
                    recent_email = RecentEmail(
                        subject=pending_email.get("subject", "Email"),
                        body=pending_email.get("body", ""),
                        recipients=employee_emails,
                        sent_at=datetime.now(),
                        success_count=send_result["sent_count"],
                        total_count=send_result["total_count"]
                    )
                    self.recent_emails.append(recent_email)
                    
                    return {
                        "success": True,
                        "response": response,
                        "email_draft": "",
                        "pending_send": False,
                        "email_sent": True,
                        "send_result": {
                            "sent_count": send_result["sent_count"],
                            "total_count": send_result["total_count"],
                            "success": True
                        }
                    }
                else:
                    response = f"❌ **Failed to send email:** {send_result.get('error', 'Unknown error')}\n\nPlease check your email configuration and try again."
                    return {
                        "success": False,
                        "response": response,
                        "email_draft": "",
                        "pending_send": False,
                        "email_sent": False
                    }
            
            elif email_draft:
                if employee_emails:
                    recipient_info = self._get_recipient_info(employee_emails)
                    response = f"📝 **Email Generated by AI Agent!**\n\nI've created a professional email for {len(employee_emails)} recipients:\n📋 **Recipients:** {', '.join(recipient_info)}\n\n**Should I send this email or would you like to enhance it?**\n\n💡 *Say 'send it' to send immediately, or 'enhance it' to make improvements.*"
                    pending_send = True
                else:
                    response = f"📝 **Email Generated by AI Agent!**\n\nI've created a professional email for you to review.\n\n**To send this email:**\n1. Add recipient email addresses in the sidebar\n2. Then say 'send it' to deliver the email\n\n💡 *You can also ask me to 'enhance it' or make modifications.*"
                    pending_send = False
                
                return {
                    "success": True,
                    "response": response,
                    "email_draft": email_draft,
                    "pending_send": pending_send,
                    "email_sent": False
                }
            
            else:
                return {
                    "success": True,
                    "response": response,
                    "email_draft": "",
                    "pending_send": False,
                    "email_sent": False
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to process message: {str(e)}",
                "response": "I apologize, but I encountered an error processing your request.",
                "email_draft": "",
                "pending_send": False,
                "email_sent": False
            }
    
    def get_recipient_info(self, target_emails: List[str]) -> List[str]:
        gmail_count = sum(1 for email in target_emails if email.lower().endswith('@gmail.com'))
        other_count = len(target_emails) - gmail_count
        
        recipient_info = []
        if gmail_count > 0:
            recipient_info.append(f"📧 {gmail_count} Gmail account(s)")
        if other_count > 0:
            recipient_info.append(f"📮 {other_count} other email account(s)")
        
        return recipient_info
    
    def get_recent_emails(self, limit: int = 10) -> List[RecentEmail]:
        return self.recent_emails[-limit:] if self.recent_emails else []
    
    async def send_email_to_employees(self, send_request: EmailSendRequest) -> EmailSendResult:
        try:
            results = await self.email_service.send_email_to_employees(
                send_request.employee_emails, 
                send_request.subject, 
                send_request.body
            )
            
            success_count = sum(1 for success in results.values() if success)
            total_count = len(send_request.employee_emails)
            
            recent_email = RecentEmail(
                subject=send_request.subject,
                body=send_request.body,
                recipients=send_request.employee_emails,
                sent_at=datetime.now(),
                success_count=success_count,
                total_count=total_count
            )
            self.recent_emails.append(recent_email)
            
            return EmailSendResult(
                success=success_count > 0,
                sent_count=success_count,
                total_count=total_count,
                results=results,
                message=f"Email sent successfully to {success_count} out of {total_count} recipients" if success_count > 0 else "Failed to send email to any recipients",
                timestamp=datetime.now()
            )
            
        except Exception as e:
            return EmailSendResult(
                success=False,
                sent_count=0,
                total_count=len(send_request.employee_emails),
                results={},
                message=f"Failed to send emails: {str(e)}",
                timestamp=datetime.now()
            )
